// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go/api/core/tools"
)

type Acl struct {
	Access          string   `json:"access,omitempty"`
	Value           string   `json:"value,omitempty"`
	Type            string   `json:"type,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *Acl) MarshalJSON() ([]byte, error) {
	type cp Acl
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type ConnectDataSource struct {
	ServiceUrl         string   `json:"service_url,omitempty"`
	ProjectName        string   `json:"project_name,omitempty"`
	DisplayName        string   `json:"display_name,omitempty"`
	Description        string   `json:"description,omitempty"`
	IconUrl            string   `json:"icon_url,omitempty"`
	ProjectDescription string   `json:"project_description,omitempty"`
	ContactEmail       string   `json:"contact_email,omitempty"`
	TenantName         string   `json:"tenant_name,omitempty"`
	ForceSendFields    []string `json:"-"`
}

func (s *ConnectDataSource) MarshalJSON() ([]byte, error) {
	type cp ConnectDataSource
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type DataSource struct {
	Id              string   `json:"id,omitempty"`
	Name            string   `json:"name,omitempty"`
	State           int      `json:"state,omitempty"`
	Description     string   `json:"description,omitempty"`
	CreateTime      string   `json:"create_time,omitempty"`
	UpdateTime      string   `json:"update_time,omitempty"`
	IsExceedQuota   bool     `json:"is_exceed_quota,omitempty"`
	IconUrl         string   `json:"icon_url,omitempty"`
	Template        string   `json:"template,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *DataSource) MarshalJSON() ([]byte, error) {
	type cp DataSource
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type Item struct {
	Id              string        `json:"id,omitempty"`
	Acl             []*Acl        `json:"acl,omitempty"`
	Metadata        *ItemMetadata `json:"metadata,omitempty"`
	StructuredData  string        `json:"structured_data,omitempty"`
	Content         *ItemContent  `json:"content,omitempty"`
	FieldAcl        string        `json:"field_acl,omitempty"`
	ForceSendFields []string      `json:"-"`
}

func (s *Item) MarshalJSON() ([]byte, error) {
	type cp Item
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type ItemContent struct {
	Format          string   `json:"format,omitempty"`
	ContentData     string   `json:"content_data,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *ItemContent) MarshalJSON() ([]byte, error) {
	type cp ItemContent
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type ItemMetadata struct {
	Title           string   `json:"title,omitempty"`
	SourceUrl       string   `json:"source_url,omitempty"`
	CreateTime      int      `json:"create_time,omitempty"`
	UpdateTime      int      `json:"update_time,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *ItemMetadata) MarshalJSON() ([]byte, error) {
	type cp ItemMetadata
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type Schema struct {
	PropertyDefinitions []*SchemaPropertyDefinition `json:"property_definitions,omitempty"`
	Id                  string                      `json:"id,omitempty"`
	ForceSendFields     []string                    `json:"-"`
}

func (s *Schema) MarshalJSON() ([]byte, error) {
	type cp Schema
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type SchemaDisplayOption struct {
	DisplayLabel    string   `json:"display_label,omitempty"`
	DisplayType     string   `json:"display_type,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *SchemaDisplayOption) MarshalJSON() ([]byte, error) {
	type cp SchemaDisplayOption
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type SchemaPropertyDefinition struct {
	Name                 string               `json:"name,omitempty"`
	IsReturnable         bool                 `json:"is_returnable,omitempty"`
	IsRepeatable         bool                 `json:"is_repeatable,omitempty"`
	IsSortable           bool                 `json:"is_sortable,omitempty"`
	IsFacetable          bool                 `json:"is_facetable,omitempty"`
	IsWildcardSearchable bool                 `json:"is_wildcard_searchable,omitempty"`
	Type                 string               `json:"type,omitempty"`
	DisplayOptions       *SchemaDisplayOption `json:"display_options,omitempty"`
	ForceSendFields      []string             `json:"-"`
}

func (s *SchemaPropertyDefinition) MarshalJSON() ([]byte, error) {
	type cp SchemaPropertyDefinition
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type DataSourceCreateResult struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type DataSourceGetResult struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type DataSourceListResult struct {
	HasMore   bool          `json:"has_more,omitempty"`
	PageToken string        `json:"page_token,omitempty"`
	Items     []*DataSource `json:"items,omitempty"`
}

type DataSourcePatchReqBody struct {
	Name            string   `json:"name,omitempty"`
	State           int      `json:"state,omitempty"`
	Description     string   `json:"description,omitempty"`
	ForceSendFields []string `json:"-"`
}

func (s *DataSourcePatchReqBody) MarshalJSON() ([]byte, error) {
	type cp DataSourcePatchReqBody
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type DataSourcePatchResult struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type DataSourceItemGetResult struct {
	Item *Item `json:"item,omitempty"`
}

// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/api/core/response"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf            *config.Config
	DataSources     *DataSourceService
	DataSourceItems *DataSourceItemService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.DataSources = newDataSourceService(s)
	s.DataSourceItems = newDataSourceItemService(s)
	return s
}

type DataSourceService struct {
	service *Service
}

func newDataSourceService(service *Service) *DataSourceService {
	return &DataSourceService{
		service: service,
	}
}

type DataSourceItemService struct {
	service *Service
}

func newDataSourceItemService(service *Service) *DataSourceItemService {
	return &DataSourceItemService{
		service: service,
	}
}

type DataSourceCreateReqCall struct {
	ctx         *core.Context
	dataSources *DataSourceService
	body        *DataSource
	optFns      []request.OptFn
}

func (rc *DataSourceCreateReqCall) Do() (*DataSourceCreateResult, error) {
	var result = &DataSourceCreateResult{}
	req := request.NewRequest("/open-apis/search/v2/data_sources", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSources.service.conf, req)
	return result, err
}

func (dataSources *DataSourceService) Create(ctx *core.Context, body *DataSource, optFns ...request.OptFn) *DataSourceCreateReqCall {
	return &DataSourceCreateReqCall{
		ctx:         ctx,
		dataSources: dataSources,
		body:        body,
		optFns:      optFns,
	}
}

type DataSourceDeleteReqCall struct {
	ctx         *core.Context
	dataSources *DataSourceService
	pathParams  map[string]interface{}
	optFns      []request.OptFn
}

func (rc *DataSourceDeleteReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}

func (rc *DataSourceDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSources.service.conf, req)
	return result, err
}

func (dataSources *DataSourceService) Delete(ctx *core.Context, optFns ...request.OptFn) *DataSourceDeleteReqCall {
	return &DataSourceDeleteReqCall{
		ctx:         ctx,
		dataSources: dataSources,
		pathParams:  map[string]interface{}{},
		optFns:      optFns,
	}
}

type DataSourceGetReqCall struct {
	ctx         *core.Context
	dataSources *DataSourceService
	pathParams  map[string]interface{}
	optFns      []request.OptFn
}

func (rc *DataSourceGetReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}

func (rc *DataSourceGetReqCall) Do() (*DataSourceGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &DataSourceGetResult{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSources.service.conf, req)
	return result, err
}

func (dataSources *DataSourceService) Get(ctx *core.Context, optFns ...request.OptFn) *DataSourceGetReqCall {
	return &DataSourceGetReqCall{
		ctx:         ctx,
		dataSources: dataSources,
		pathParams:  map[string]interface{}{},
		optFns:      optFns,
	}
}

type DataSourceListReqCall struct {
	ctx         *core.Context
	dataSources *DataSourceService
	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *DataSourceListReqCall) SetView(view int) {
	rc.queryParams["view"] = view
}
func (rc *DataSourceListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *DataSourceListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *DataSourceListReqCall) Do() (*DataSourceListResult, error) {
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DataSourceListResult{}
	req := request.NewRequest("/open-apis/search/v2/data_sources", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSources.service.conf, req)
	return result, err
}

func (dataSources *DataSourceService) List(ctx *core.Context, optFns ...request.OptFn) *DataSourceListReqCall {
	return &DataSourceListReqCall{
		ctx:         ctx,
		dataSources: dataSources,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}

type DataSourcePatchReqCall struct {
	ctx         *core.Context
	dataSources *DataSourceService
	body        *DataSourcePatchReqBody
	pathParams  map[string]interface{}
	optFns      []request.OptFn
}

func (rc *DataSourcePatchReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}

func (rc *DataSourcePatchReqCall) Do() (*DataSourcePatchResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &DataSourcePatchResult{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSources.service.conf, req)
	return result, err
}

func (dataSources *DataSourceService) Patch(ctx *core.Context, body *DataSourcePatchReqBody, optFns ...request.OptFn) *DataSourcePatchReqCall {
	return &DataSourcePatchReqCall{
		ctx:         ctx,
		dataSources: dataSources,
		body:        body,
		pathParams:  map[string]interface{}{},
		optFns:      optFns,
	}
}

type DataSourceItemCreateReqCall struct {
	ctx             *core.Context
	dataSourceItems *DataSourceItemService
	body            *Item
	pathParams      map[string]interface{}
	optFns          []request.OptFn
}

func (rc *DataSourceItemCreateReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}

func (rc *DataSourceItemCreateReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id/items", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSourceItems.service.conf, req)
	return result, err
}

func (dataSourceItems *DataSourceItemService) Create(ctx *core.Context, body *Item, optFns ...request.OptFn) *DataSourceItemCreateReqCall {
	return &DataSourceItemCreateReqCall{
		ctx:             ctx,
		dataSourceItems: dataSourceItems,
		body:            body,
		pathParams:      map[string]interface{}{},
		optFns:          optFns,
	}
}

type DataSourceItemDeleteReqCall struct {
	ctx             *core.Context
	dataSourceItems *DataSourceItemService
	pathParams      map[string]interface{}
	optFns          []request.OptFn
}

func (rc *DataSourceItemDeleteReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}
func (rc *DataSourceItemDeleteReqCall) SetItemId(itemId string) {
	rc.pathParams["item_id"] = itemId
}

func (rc *DataSourceItemDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id/items/:item_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSourceItems.service.conf, req)
	return result, err
}

func (dataSourceItems *DataSourceItemService) Delete(ctx *core.Context, optFns ...request.OptFn) *DataSourceItemDeleteReqCall {
	return &DataSourceItemDeleteReqCall{
		ctx:             ctx,
		dataSourceItems: dataSourceItems,
		pathParams:      map[string]interface{}{},
		optFns:          optFns,
	}
}

type DataSourceItemGetReqCall struct {
	ctx             *core.Context
	dataSourceItems *DataSourceItemService
	pathParams      map[string]interface{}
	optFns          []request.OptFn
}

func (rc *DataSourceItemGetReqCall) SetDataSourceId(dataSourceId string) {
	rc.pathParams["data_source_id"] = dataSourceId
}
func (rc *DataSourceItemGetReqCall) SetItemId(itemId string) {
	rc.pathParams["item_id"] = itemId
}

func (rc *DataSourceItemGetReqCall) Do() (*DataSourceItemGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &DataSourceItemGetResult{}
	req := request.NewRequest("/open-apis/search/v2/data_sources/:data_source_id/items/:item_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.dataSourceItems.service.conf, req)
	return result, err
}

func (dataSourceItems *DataSourceItemService) Get(ctx *core.Context, optFns ...request.OptFn) *DataSourceItemGetReqCall {
	return &DataSourceItemGetReqCall{
		ctx:             ctx,
		dataSourceItems: dataSourceItems,
		pathParams:      map[string]interface{}{},
		optFns:          optFns,
	}
}

// Code generated by lark suite oapi sdk gen
package v6

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf                   *config.Config
	ApplicationVisibilitys *ApplicationVisibilityService
	ApplicationAppUsages   *ApplicationAppUsageService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.ApplicationVisibilitys = newApplicationVisibilityService(s)
	s.ApplicationAppUsages = newApplicationAppUsageService(s)
	return s
}

type ApplicationVisibilityService struct {
	service *Service
}

func newApplicationVisibilityService(service *Service) *ApplicationVisibilityService {
	return &ApplicationVisibilityService{
		service: service,
	}
}

type ApplicationAppUsageService struct {
	service *Service
}

func newApplicationAppUsageService(service *Service) *ApplicationAppUsageService {
	return &ApplicationAppUsageService{
		service: service,
	}
}

type ApplicationAppUsageOverviewReqCall struct {
	ctx                  *core.Context
	applicationAppUsages *ApplicationAppUsageService
	body                 *ApplicationAppUsageOverviewReqBody
	pathParams           map[string]interface{}
	queryParams          map[string]interface{}
	optFns               []request.OptFn
}

func (rc *ApplicationAppUsageOverviewReqCall) SetAppId(appId string) {
	rc.pathParams["app_id"] = appId
}
func (rc *ApplicationAppUsageOverviewReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}

func (rc *ApplicationAppUsageOverviewReqCall) Do() (*ApplicationAppUsageOverviewResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &ApplicationAppUsageOverviewResult{}
	req := request.NewRequest("/open-apis/application/v6/applications/:app_id/app_usage/overview", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.applicationAppUsages.service.conf, req)
	return result, err
}

func (applicationAppUsages *ApplicationAppUsageService) Overview(ctx *core.Context, body *ApplicationAppUsageOverviewReqBody, optFns ...request.OptFn) *ApplicationAppUsageOverviewReqCall {
	return &ApplicationAppUsageOverviewReqCall{
		ctx:                  ctx,
		applicationAppUsages: applicationAppUsages,
		body:                 body,
		pathParams:           map[string]interface{}{},
		queryParams:          map[string]interface{}{},
		optFns:               optFns,
	}
}

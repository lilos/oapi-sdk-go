// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf       *config.Config
	AwemeUsers *AwemeUserService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.AwemeUsers = newAwemeUserService(s)
	return s
}

type AwemeUserService struct {
	service *Service
}

func newAwemeUserService(service *Service) *AwemeUserService {
	return &AwemeUserService{
		service: service,
	}
}

type AwemeUserGetBindInfoReqCall struct {
	ctx         *core.Context
	awemeUsers  *AwemeUserService
	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *AwemeUserGetBindInfoReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *AwemeUserGetBindInfoReqCall) SetUserId(userId string) {
	rc.queryParams["user_id"] = userId
}

func (rc *AwemeUserGetBindInfoReqCall) Do() (*AwemeUserGetBindInfoResult, error) {
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &AwemeUserGetBindInfoResult{}
	req := request.NewRequest("/open-apis/aweme_ecosystem/v1/aweme_users/get_bind_info", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.awemeUsers.service.conf, req)
	return result, err
}

func (awemeUsers *AwemeUserService) GetBindInfo(ctx *core.Context, optFns ...request.OptFn) *AwemeUserGetBindInfoReqCall {
	return &AwemeUserGetBindInfoReqCall{
		ctx:         ctx,
		awemeUsers:  awemeUsers,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}
